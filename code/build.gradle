plugins {
    // we can not use ext variables here
    id "java"
    id "checkstyle"
    id "com.github.spotbugs" version "5.+"
    id "com.diffplug.spotless" version "6.5.+"
    id "java-library"
    id "maven-publish"
    id "signing"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
    // OWASP, Vulnerability scanner for security in dependencies: "./gradlew dependencyCheckAnalyze"
    id "org.owasp.dependencycheck" version "7.+"
}

group = "io.github.pm-dungeon"

ext {
    // we can not use the + operator here
    gdxVersion = "1.10.1-SNAPSHOT"
    aiVersion = "1.8.2"
    gsonVersion = "2.9.0"
}

sourceCompatibility = 17
[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
sourceSets.main.java.srcDirs = ["core/src/"]
sourceSets.test.java.srcDirs = ["core/test/"]

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    gradlePluginPortal()
    google()
}

dependencies {
    // LibGDX
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
    implementation "com.badlogicgames.gdx:gdx-ai:$aiVersion"

    // JUnit 4, Mockito and Powermock for testing:
    // https://mvnrepository.com/artifact/junit/junit
    testImplementation "junit:junit:4.+"

    // https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4
    testImplementation "org.powermock:powermock-module-junit4:2.+"
    // https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito2
    testImplementation "org.powermock:powermock-api-mockito2:2.+"

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: "com.google.code.gson", name: "gson", version: gsonVersion
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

checkstyle {
    toolVersion = "10.2"
    configFile = file("checkstyle-config/checks.xml")
    showViolations = true
}

spotbugs {
    ignoreFailures = true
    showStackTraces = false
    reportLevel = "low"
}

spotbugsMain {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

spotbugsTest {
    reports {
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.xml")
        }
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = "fancy-hist.xsl"
        }
    }
}

spotless {
    java {
        googleJavaFormat().aosp()
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "io.github.pm-dungeon"
            artifactId = "core"
            version = project.version

            from components.java

            pom {
                name = "PM-Dungeon core"
                description = "The pmdungeon is a lightweight, libgdx based, Java framework for the development of a 2D rogue like."
                url = "https://github.com/PM-Dungeon/core"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/PM-Dungeon/core/blob/master/LICENSE.md"
                    }
                }
                developers {
                    developer {
                        id = "AMatutat"
                        name = "Andr√© Matutat"
                        email = "pm-dungeon@fh-bielefeld.de"
                    }
                    developer {
                        id = "cagix"
                        name = "Carsten Gips"
                        email = "pm-dungeon@fh-bielefeld.de"
                    }
                    developer {
                        id = "TGrothe"
                        name = "Tobias Grothe"
                        email = "pm-dungeon@fh-bielefeld.de"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/PM-Dungeon/core.git"
                    developerConnection = ""
                    url = "https://github.com/PM-Dungeon/core"
                }
            }
        }
    }

    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    useInMemoryPgpKeys("$System.env.GPG_PRIVATE_KEY", "$System.env.PASSPHRASE")
    sign publishing.publications
}

javadoc {
    // failOnError false
    options.addStringOption("Xdoclint:none", "-quiet")
    options.addStringOption("encoding", "UTF-8")
    options.addStringOption("charSet", "UTF-8")
}

task buildJavadocZip(type: Zip, dependsOn: javadoc) {
    from "$buildDir/docs/"
    archiveFileName = "${project.name}-${project.version}-javadoc.zip"
    destinationDirectory = file("$buildDir/libs/")
}

nexusPublishing {
    repositories {
        sonatype {
            // only for users registered in Sonatype after 24 Feb 2021
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("MAVEN_USERNAME")
            password = System.getenv("MAVEN_PASSWORD")
        }
    }
}
